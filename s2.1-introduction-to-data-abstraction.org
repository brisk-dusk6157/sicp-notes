#+PROPERTY: header-args  :cache yes
#+PROPERTY: header-args+  :exports both
#+title: 2.1 Introduction to data abstraction
#+options: num:nil

** Intro
Why do we want compound data in a programming language?
- to elevate the conceptual level at which we can design our programs
  - thanks to "glueing" pieces of data together into a /compound data object/, which can be manipulated as single conceptual unit
- to increase the modularity of our designs
  - /data abstraction/ is a general technique that helps to separate the way data objects are /represented/ from the way data objects are /used/ by the program
- to enhance the expressive power of our language
  - lets the program to manipulate with data objects without knowing its representation.

Abstraction is a technique for coping with complexity, and we will see how data abstractions enables us to erect suitable /abstraction barriers/ between different parts of a program.

A programming language should provide some kind of "glue":
- There are many possible kinds of glue
- we will discover how to form compound data using no special "data" operations, only procedures
- we will explore some convential techniques for representing sequences and trees
- /closure/ - glue should allow us to combine into data objects not only primitive data objects, but compound data objects as well
- compound data objects can serve as /conventional interfaces/ for combining program modules in mix-and-match ways.


/Symbolic expressions/ - data whose elementary parts can be arbitrary symbols rathen than only numbers.
- we explore various alternatives for representing sets of objects
- there are many ways in which a given data structure can be represented in terms of simpler objects
- choice of representation can have significant impact on the time and space requirements of processes

There is a problem of working with data that may be represented differently by different parts of a program.
- for that, /generic operations/ must handle different types of data.
- maintaining modularity in the presence of generic operations is more difficult and require more powerful abstractions
  - /data-directed programming/ is a technique that allows individual data representations to be designed in isolation and then combined /additively/ (without modification).

** 2.1 Introduction to Data Abstraction

/data abstraction/ is a methodology that enables us to isolate how a compound data object is used from the details of how it is constructed from more primitive data objects.

Basic idea is to structure the programs so that they operate on "abstract data", i.e. rely only on properties of data objects that are needed for computation. At the same time, a "concrete" data representation is defined independent of the program that use the data. The interface between these two parts will be a set of procedures, /selectors/ and /constructors/, that implement abstract data in terms of the concrete representation.


*** 2.1.1 Example: Arithmetic Operations for Rational Numbers
Using some /wishful thinking/, assume these selectors and constructors are available:
- ~(make-rat <n> <d>)~ returns the rational number whose numerator is integer ~<n>~ and denominator is integer ~<d>~
- ~(numer <x>)~ returns the numerator of the rational number ~<x>~
- ~(denom <x>)~ returns the denominator of the rational number ~<x>~

Now even without implementation, we could then add, subtract, multiply, divide, and test equality:

#+name: rat-operations
#+begin_src racket :exports code
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
		 (* (numer y) (denom x)))
	      (* (denom x) (denom y))))

  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
		 (* (numer y) (denom x)))
	      (* (denom x) (denom y))))

  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
	      (* (denom x) (denom y))))

  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
	      (* (denom x) (numer y))))

  (define (equal-rat? x y)
    (= (* (numer x) (denom y))
       (* (denom x) (numer y))))
#+end_src

#+RESULTS[f4bd5b47ae39a42e4bd6c54924b7b4c163a24913]: rat-operations
: /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-D74SO7/ob-racketF8lBjX.rkt:4:3: make-rat: unbound identifier
:   in: make-rat
:   location...:
:    /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-D74SO7/ob-racketF8lBjX.rkt:4:3

To define ~make-rat~, ~numer~, and ~denom~, we need some glue.

**** Pairs
Compound structure called a /pair/ can be constructed with the ~cons~ procedure. ~car~ and ~cdr~ can be used to extract first and second element of the pair respectively.

#+begin_src racket 
  #lang sicp

  (define x (cons 1 2))
  (car x)
  (cdr x)
#+end_src

#+RESULTS[4bd9b949d534f5524ad37561079b0ae2e7e6265c]:
: 1
: 2

Data objects constructed from paris are called /list-structured/ data.

**** Representing rational numbers

#+name: rat-lib0
#+begin_src racket :noweb yes :exports code
  #lang sicp
  (define (gcd a b)
    (if (zero? b)
	a
	(gcd b (remainder a b))))
  (define (make-rat n d)
    (let ((norm-d (if (< d 0) (- d) d))
	  (norm-n (if (< d 0) (- n) n))
	  (c (gcd (abs n) (abs d))))
      (cons (/ norm-n c) (/ norm-d c))))
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (print-rat x)
    (newline)
    (display (numer x))
    (display "/")
    (display (denom x)))

  <<rat-operations>>
#+end_src

#+RESULTS[8e57521e486dfc7546a68cfe3301039438c1e613]: rat-lib0

#+begin_src racket :noweb yes
  <<rat-lib0>>

  (define one-half (make-rat 1 2))
  (print-rat one-half)

  (define one-third (make-rat 1 3))

  (print-rat (add-rat one-half one-third))
  (print-rat (mul-rat one-half one-third))
  (print-rat (add-rat one-third one-third))

  (define neg-one-third (make-rat 1 -3))
  (define neg-one-half (make-rat -1 2))

  (print-rat (add-rat one-half neg-one-half))
  (print-rat (mul-rat one-half neg-one-third))
  (print-rat (mul-rat neg-one-third neg-one-third))
#+end_src

#+RESULTS[984f7fb89b5df01755cbf084bc0803292daf54f7]:
: 
: 1/2
: 5/6
: 1/6
: 2/3
: 0/1
: -1/6
: 1/9

*** 2.1.2 Abstraction Barriers
/Abstraction barriers/ isolate different "levels" of the system.
At each level, the barrier separates the programs that use the data abstraction from the programs that implement the data abstraction.
Procedures at each level are the interfaces that define the abstraction barriers and connect the different levels.

Advantages:
- programs are easier to maintain and modify - if dependence on the representation is confined by design to a very few program modules.
- allows flexibility to consider alterante implementations

**** Exercise 2.2 - Representation for line segments in a plane
Each segment is represented as a pair of points: a starting point and an endpoing point.
Forthermore, a point can be represented as a pair of numbers: the $x$ and $y$ coordinates.

***** Define a constructor ~make-segment~ and selectors ~start-segment~ and ~end-segment~
These define the representation of segments in terms of points.

***** Define a constructor ~make-point~ and selectors ~x-point~ and ~y-point~
These define the representation of points in terms of numbers

***** Define a procedure ~midpoint-segment~
~midpoint-segment~ takes a line segment as argument and returns its midpoint.
Midpoint - the point whose coordinates are the average of the coordinates of the endpoints.


#+begin_src racket
  #lang sicp

  (define (make-segment start-point end-point)
    (cons start-point end-point))

  (define (start-segment segment)
    (car segment))

  (define (end-segment segment)
    (cdr segment))

  (define (make-point x y)
    (cons x y))

  (define (x-point point)
    (car point))

  (define (y-point point)
    (cdr point))

  (define (midpoint-segment segment)
    (define (average a b) (/ (+ a b) 2))
    (make-point (average (x-point (start-segment segment))
			 (x-point (end-segment segment)))
		(average (y-point (start-segment segment))
			 (y-point (end-segment segment)))))

  (define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")"))

  (define segment1 (make-segment (make-point 0 0)
				 (make-point 1 4)))
  (print-point (midpoint-segment segment1))
  (define segment2 (make-segment (make-point 1 1)
				 (make-point 10 10)))
  (print-point (midpoint-segment segment2))
  (define segment3 (make-segment (make-point 1 -1)
				 (make-point -10 10)))
  (print-point (midpoint-segment segment3))
#+end_src

#+RESULTS[5f4d8bc810691adcbf0c43b080999ff60db9242a]:
: 
: (1/2,2)
: (11/2,11/2)
: (-9/2,9/2)

**** Exercise 2.3 - Representation for rectangles in a plane

#+name: ps-lib
#+begin_src racket :exports none
  #lang sicp

  (define (make-segment start-point end-point)
    (cons start-point end-point))

  (define (start-segment s)
    (car s))

  (define (end-segment s)
    (cdr s))

  (define (length-segment s)
    (define (square x) (* x x))
    (sqrt (+ (square (- (x-point (start-segment s))
			(x-point (end-segment s))))
	     (square (- (y-point (start-segment s))
			(y-point (end-segment s)))))))

  (define (make-point x y)
    (cons x y))

  (define (x-point point)
    (car point))

  (define (y-point point)
    (cdr point))

  (define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")"))

#+end_src

#+RESULTS[ba9ee25052a71e0517eed6c8ded0f02e3ac97514]: ps-lib

***** Implement a representation for rectangles in a plane
A rectangle is a quadrilateral with four right angles.
If we restrict rectangles only to those with sides parallel to axis, it can be represented using two points of any diagonal. Procedure ~make-rectangle~ accepts two end point of a diagonal and returns a rectangle.

Given that for both ~perimeter~ and ~area~ we need to know only two perpendicular sides, a ~side-rectangle~ procedure accepting a rectangle ~r~ and an arbitrary side number ~i~, and returning a segment representing a side. One important detail, is to define ~side-rectangle~ in a way to return perpendicular sides for any ~i~ and ~i+1~ sides.

For ~perimeter~ and ~area~ only two perpendicular sides is needed, so I did not bother with calculating sides 3 and 4.

First rectangles implementation:
#+name: rectangles-1
#+begin_src racket :noweb strip-export
  <<ps-lib>>
  (define (make-rectangle p1 p2)
    "Given two end points of a diagonal, returns a rectangle with sides perpendicular to axes."
    (cons p1 p2))

  (define (side-rectangle r i)
    "Returns a segment representation of side i. For any side i, i+1 is guaranteed to be perpendicular. Side 1 is arbitrary."
    (let ((diag-p1 (car r))
	  (diag-p2 (cdr r)))
      (cond ((> i 4) (side-rectangle r (+ 1 (remainder i 4))))
	    ((= i 1) (make-segment diag-p1
				   (make-point (x-point diag-p1) (y-point diag-p2))))
	    ((= i 2) (make-segment (make-point (x-point diag-p1) (y-point diag-p2))
				   diag-p2))
	    (else (error "Not implemented")))))

  <<user-code-snippet>>

  (define r1 (make-rectangle (make-point 0 0)
			     (make-point 1 1)))
  (define r2 (make-rectangle (make-point -2 -2)
			     (make-point 1 1)))
  (perimeter r1)
  (area r1)

  (perimeter r2)
  (area r2)

#+end_src

#+RESULTS[61a7de1d60cdd648f2cf63d4769a225bb05445a2]: rectangles-1
: 4
: 1
: 12
: 9


***** Create procedures for perimeter and area of a given rectangle
Acknowledging this is an exercise, I wonder if perimeter and area would be better if defined as dependent on the internal representation of rectangle, and to not bother with adding abstraction barriers to make such thin "levels"? This way you don't have too much design to worry about.

With ~side-rectangle~ as part of rectangle interface, the code to compute perimeter and area is as follows:
#+name: user-code-snippet
#+begin_src racket :exports code
  (define (perimeter r)
    (* 2
       (+ (length-segment (side-rectangle r 1))
	  (length-segment (side-rectangle r 2)))))

  (define (area r)
    (* (length-segment (side-rectangle r 1))
       (length-segment (side-rectangle r 2))))
#+end_src

#+RESULTS[1458c9316e917afe6214613a421085a364f77e84]: user-code-snippet
: /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-RKEWPb/ob-racketlJoyJn.rkt:5:9: length-segment: unbound identifier
:   in: length-segment
:   location...:
:    /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-RKEWPb/ob-racketlJoyJn.rkt:5:9

The segment interface is extended with ~length-segment~ procedure:
#+name: length-segment
#+begin_src racket :exports code
  (define (length-segment s)
    (define (square x) (* x x))
    (sqrt (+ (square (- (x-point (start-segment s))
			(x-point (end-segment s))))
	     (square (- (y-point (start-segment s))
			(y-point (end-segment s)))))))
#+end_src

#+RESULTS[3aa051cd6e588f05b19e4e2e5db5f097bb0f7842]: length-segment
: /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-Fs0u1Z/ob-racketDr65WI.rkt:5:23: x-point: unbound identifier
:   in: x-point
:   location...:
:    /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-Fs0u1Z/ob-racketDr65WI.rkt:5:23

***** Implement a /different/ representation for rectangles
Can you design your system with suitable abstraction barriers, so that the same perimeter and area procedures will work using either representation.

As a second approach, I tried to lift the "sides parallel to axis" restriction, and considered several approaches to the design problem:
1) represent as two perpendicular edges
2) represent as 3 vertices
3) represent as a diagonal and an vertex not no that diagonal

All of them are a twist on 3-verices problem, but it was the easiest to "calculate" two perpendicular sides needed for ~perimeter~ and ~area~ with the approach #1 (just return the internal representation).

The same procedure ~side-rectangle~ remains as a part of rectangle data abstraction, and ~perimeter~ and ~area~ are work appropriately using the new rectangle implementation.

#+name: rectangles-2
#+begin_src racket :noweb strip-export
  <<ps-lib>>
  (define (make-rectangle s1 s2)
    "Given two perpendicular sides, returns a rectangle."
    (cons s1 s2))

  (define (side-rectangle r i)
    "Returns a segment representation of side i. For any side i, i+1 is guaranteed to be perpendicular. Side 1 is arbitrary."
    (let ((s1 (car r))
	  (s2 (cdr r)))
      (cond ((> i 4) (side-rectangle r (+ 1 (remainder i 4))))
	    ((= i 1) s1)
	    ((= i 2) s2)
	    (else (error "Not implemented")))))
  <<user-code-snippet>>
  (define r1 (make-rectangle (make-segment (make-point 0 0)
					   (make-point 0 1))
			     (make-segment (make-point 0 1)
					   (make-point 1 1))))
  (define r2 (make-rectangle (make-segment (make-point -2 -2)
					   (make-point -2 1))
			     (make-segment (make-point -2 1)
					   (make-point 1 1))))

  (perimeter r1)
  (area r1)

  (perimeter r2)
  (area r2)

  (define r3 (make-rectangle (make-segment (make-point 0 0)
					   (make-point -3 3))
			     (make-segment (make-point -3 3)
					   (make-point 2 8))))
  (define r4 (make-rectangle (make-segment (make-point 0 0)
					   (make-point 0 3))
			     (make-segment (make-point 0 3)
					   (make-point 4 3))))
  (perimeter r3)
  (area r3)

  (perimeter r4)
  (area r4)

#+end_src

#+RESULTS[e5cea60a11c92837373df6215033da6ef759c7b6]: rectangles-2
: 4
: 1
: 12
: 9
: 22.62741699796952
: 30.0
: 14
: 12

*** 2.1.3 What Is Meant by Data?

/Data/ is defined by a collection of selectors and constructors, together with specified condition these procedures must fullfill for representation to be valid.

For example, we have ~cons~, ~car~, and ~cdr~ procedures to manipulate with pairs. If ~x~ is defined to be ~(cons a b)~, then ~(car x)~ must be ~a~, and ~(cdr x)~ must be ~b~.

We can implement pair procedures with only procedures:

#+begin_src racket
  #lang sicp

  (define (-cons x y)
    (define (dispatch m)
      (cond ((= m 0) x)
	    ((= m 1) y)
	    (else (error "Argument not 0 or 1 --- CONS" m))))
    dispatch)

  (define (-car p) (p 0))
  (define (-cdr p) (p 1))

  (define p (-cons 1 10))
  (-car p)
  (-cdr p)
#+end_src

#+RESULTS[4741e9d7c7f9ac6f9244a5b41cb8a43729510297]:
: 1
: 10

**** Exercise 2.4 - alternative procedural representation for pairs

#+begin_src racket
  #lang sicp

  (define (cons x y)
    (lambda (m) (m x y)))

  (define (car z)
    (z (lambda (p q) p)))

  (define (cdr z)
    (z (lambda (p q) q)))

  (= 1 (car (cons 1 2)))
  (= 2 (cdr (cons 1 2)))
  
  ;; (define z (cons 1 2))
  ;; - (define z (lambda (m) (m 1 2)))
  ;; (car z)
  ;; - (car (lambda (m) (m 1 2)))
  ;; -- ((lambda (m) (m 1 2)) (lambda (p q) p))
  ;; --- ((lambda (p q) p) 1 2)
  ;; ----1
#+end_src

#+RESULTS[1dc24bd7e7ea34696a519cb9dc2924497911968e]:
: #t
: #t

**** Exercise 2.5 - Pair of nonnegative integers using only numbers and arithmetic operations
Represent the pair $a$ and $b$ as the integer that is the product $2^a * 3^b$

#+begin_src racket
  #lang sicp

  (define (pow b p)
    (define (square x) (* x x))
    (cond ((zero? p) 1)
	  ((even? p)
	   (square (pow b (/ p 2))))
	  (else
	   (* b (pow b (- p 1))))))

  (define (cons a b)
    (* (pow 2 a)
       (pow 3 b)))

  (define (car p)
    (cond ((= 1 p) 0)
	  ((zero? (remainder p 3))
	   (car (/ p 3)))
	  ((zero? (remainder p 2))
	   (inc (car (/ p 2))))))

  (define (cdr p)
    (cond ((= 1 p) 0)
	  ((zero? (remainder p 2))
	   (cdr (/ p 2)))
	  ((zero? (remainder p 3))
	   (inc (cdr (/ p 3))))))

  (= 3 (car (cons 3 6)))
  (= 6 (cdr (cons 3 6)))
#+end_src

#+RESULTS[7427ae41332e4b362b647ce82ed94e14fd85d9a0]:
: #t
: #t

**** Exercise 2.6 - Church numerals

#+begin_src racket
  #lang sicp

  (define zero (lambda (f) (lambda (x) x)))
  (define (add-1 n)
    (lambda (f) (lambda (x) (f ((n f) x)))))

  ; (define one (add-1 zero))
  ; (define one (add-1 (lambda (f) (lambda (x) x))))
  (define one
    (lambda (f)
      (lambda (x)
	; (f (((lambda (f) (lambda (x) x)) f) x)))))
	(f x))))
  ; (define two (add-1 one))
  ; (define two (add-1 (lambda (f) (lambda (x) (f x)))))
  (define two
    (lambda (f)
      (lambda (x)
	; (f (((lambda (f) (lambda (x) (f x))) f) x)))))
	(f (f x)))))

  ;; (define (add n1 n2) ((n1 add-1) ((n2 add-1) zero)))
  (define (add n1 n2)
    (lambda (f)
      (lambda (x)
	((n1 f) ((n2 f) x)))))

  (define three (add two one))
  ;; (((lambda (f) (lambda (x) (f (f x)))) add-1)  (((lambda (f) (lambda (x) (f x))) add-1) zero))
  ;; ((lambda (x) (add-1 (add-1 x)))
  ;;  ((lambda (x) (add-1 x)) zero))
  ;; ((lambda (x) (add-1 (add-1 x)))
  ;;  (add-1 zero))
  ;; ((add-1 (add-1 (add-1 zero))))

  (define (twice n) (add n n))
  (define n5 (add three two))
  (define n20 (twice (twice n5)))
  (define n80 (twice (twice n20)))
  (define n320 (twice (twice n80)))
  (define n400 (add n320 n80))
  (define n420 (add n400 n20))
  ((n420 inc) 0)
#+end_src

#+RESULTS[6ff32f5839d6d73fb38de84190b8d4dbe6b402b9]:
: 420

*** 2.1.4 Extended Exercise: Interval Arithmetic

**** Introduce interval arithmetic
...ability to manipulate inexact quantities with known precision, so that when a computation is done with such approximate quantities result is a number with known precision.

Compute the value of a parallel equivalent resistence $R_p$ of two resistors $R_1$ and $R_2$:
$$ R_p = \frac{1}{1/R_1 + 1/R_2} $$

#+name: interval-arithmetic-example
#+begin_src maxima
  R_1: 6.8;
  R_1_tol: 0.1;
  R_1_min: R_1*(1-R_1_tol);
  R_1_max: R_1*(1+R_1_tol);

  R_2: 4.7;
  R_2_tol: 0.05;
  R_2_min: R_2*(1-R_2_tol);
  R_2_max: R_2*(1+R_2_tol);

  display(R_1_min, R_1_max);
  display(R_2_min, R_2_max);

  R_p(r1, r2) := 1/(1/r1 + 1/r2);

  R_p_min: R_p(R_1_min, R_2_min);
  R_p_max: R_p(R_1_max, R_2_max);
  display(R_p_min, R_p_max);
#+end_src

#+RESULTS[e5203b46d9a931f99a13a8c7ae30c7c383d22579]: interval-arithmetic-example
| R_1_min | = |              6.12 |
| R_1_max | = |              7.48 |
| R_2_min | = |             4.465 |
| R_2_max | = |             4.935 |
| R_p_min | = | 2.581558809636278 |
| R_p_max | = |  2.97332259363673 |

#+RESULTS[e5203b46d9a931f99a13a8c7ae30c7c383d22579]:
| R_1_min | = |              6.12 |
| R_1_max | = |              7.48 |
| R_2_min | = |             4.465 |
| R_2_max | = |             4.935 |
| R_p_min | = | 2.581558809636278 |
| R_p_max | = |  2.97332259363673 |

Idea is to implement "interval arithmetic" as a set of arithmetic operations for combining "intervals". The result of adding, subtracting, multiplyting and dividing two intervals is itself an interval, representing the range of results.

Accept as a postulate the existence of an abstract object called an "interval" that has two endpoints: a lower bound and an upper bound. ~make-interval~ can be used to construct the interval given two endpoints.

**** Some operations implementation

Add, multiply and divide operations:
#+name: interval-operations-abstract
#+begin_src racket :exports code
  (define (add-interval x y)
    (make-interval (+ (lower-bound x) (lower-bound y))
		   (+ (upper-bound x) (upper-bound y))))

  (define (mul-interval x y)
    (let ((p1 (* (lower-bound x) (lower-bound y)))
	  (p2 (* (lower-bound x) (upper-bound y)))
	  (p3 (* (upper-bound x) (lower-bound y)))
	  (p4 (* (upper-bound x) (upper-bound y))))
      (make-interval (min p1 p2 p3 p4)
		     (max p1 p2 p3 p4))))

  (define (div-interval x y)
    (if (and (<= (lower-bound y) 0)
	     (>= (upper-bound y) 0))
	(error "Undefined division by interval containing 0 -- div-interval" y)
	(mul-interval x
		      (make-interval (/ 1.0 (upper-bound y))
				     (/ 1.0 (lower-bound y))))))

#+end_src

#+RESULTS[fcf3637006a1a3c0d07da725e73c6a4da9c64259]: interval-operations-abstract
: /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-LX7iYb/ob-racketZouGCX.rkt:4:3: make-interval: unbound identifier
:   in: make-interval
:   location...:
:    /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-LX7iYb/ob-racketZouGCX.rkt:4:3

**** Exercise 2.7 - Constructor and selectors

#+name: interval-constructor
#+begin_src racket
  (define (make-interval a b) (cons a b))

#+end_src

#+RESULTS[fbbff3b4fe7fc016e979d6b5950c8aa5db020a77]: interval-constructor

#+name: interval-selectors
#+begin_src racket
  (define (lower-bound i) (car i))
  (define (upper-bound i) (cdr i))

#+end_src

#+RESULTS[e4340c797f7925f1f4417c201193b8dbd33b391d]: interval-selectors

And let's see what we've got already:
#+name: interval-ex2.7-test
#+begin_src racket :cache yes :noweb yes
  #lang sicp
  <<interval-constructor>>
  <<interval-selectors>>
  <<interval-operations-abstract>>

  (define i1 (make-interval 1.5 2.5))
  (define i2 (make-interval 0.1 0.3))
  (add-interval i1 i2)
  (mul-interval i1 i2)
  (div-interval i1 i2)
  (div-interval i2 i1)
#+end_src

#+RESULTS[dc3b0fe14eae73b5e0b6fbe7776e3ff4e887aa81]: interval-ex2.7-test
: (1.6 . 2.8)
: (0.15000000000000002 . 0.75)
: (5.0 . 25.0)
: (0.04000000000000001 . 0.19999999999999998)

**** Exercise 2.8 - Difference of intervals

Lower bound of the difference of two intervals is the difference between the lower bound of the minuend and the upper bound of the subtrahend.
Upper bound of the difference of two intervals is the difference between the upper bound of the minuend and the lower bound of the subtrahend.

#+name: interval-interface-1-snippet
#+begin_src racket :noweb yes
  <<interval-constructor>>
  <<interval-selectors>>
  <<interval-operations-abstract>>  
  (define (sub-interval x y)
    (make-interval (- (lower-bound x) (upper-bound y))
		   (- (upper-bound x) (lower-bound y))))
#+end_src

#+RESULTS[ec1a50f2e439fdde6fadee5a15e79fc5734f1c38]: interval-interface-1-snippet

And see how it looks like:
#+name: ex-2.8-test
#+begin_src racket :noweb yes
  #lang sicp

  <<interval-interface-1-snippet>>
  (define i1 (make-interval 1.5 2.5))
  (define i2 (make-interval 0.1 0.3))
  (sub-interval i1 i2)
  (sub-interval i2 i1)
#+end_src

#+RESULTS[49d01245a86a986d7c647cccfb2e814053de869c]: ex-2.8-test
: (1.2 . 2.4)
: (-2.4 . -1.2)

#+RESULTS[49d01245a86a986d7c647cccfb2e814053de869c]:
: (1.2 . 2.4)
: (-2.4 . -1.2)

**** Exercise 2.9 - The width of an interval
The /width/ of an interval is half of the difference between its upper and lower bounds. The width is a measure of uncertainty of the number specified by the interval. For some arithmetic operations the width of the result of combining two intervals is a function only of the widths of the argument intervals, whereas for others the width of the combination is not a function of the width of the argument intervals.

1. Show that the width of the sum (or difference) of two intervals depends only on the widths of term intervals added (or subtracted).
   - This shows that width of the sum is a function of widths of term intervals:
     $$ I_1 = [x_l, x_u], w_1 = \frac{x_u-x_l}{2} $$
     $$ I_2 = [y_l, y_u], w_2 = \frac{y_u-y_l}{2} $$
     $$ I_s = I_1 + I_2 = [x_l + y_l, x_u + y_u] $$
     $$ w_s = \frac{x_u+y_u-x_l-y_l}{2} = \frac{x_u-x_l}{2} + \frac{y_u-y_l}{2} = w_1 + w_2 $$

   - Similar reasoning can be applied to show that the width of the difference is a function of the widths of term intervals.

2. Give examles to show that this is not true for multiplication (or division).
   - Consider this example:
     $$ I_1 = [-1, 1], w_1 = \frac{2}{2} = 1 $$
     $$ I_2 = [-3, 2], w_2 = \frac{5}{2} $$
     $$ I_m = I_1 \times I_2 = [-1, 1] \times [-3, 2] = [1 * -3, -1 * -3] = [-3, 3] $$
     $$ w_m = \frac{6}{2} = 3 $$
     
     $$ J_1 = [1, 3], v_1 = \frac{2}{2} = 1 $$
     $$ J_2 = [0, 5], v_2 = \frac{5}{2} $$
     $$ J_m = J_1 \times J_2 = [1, 3] \times [0, 5] = [0 * 1, 5 * 3] = [0, 15] $$
     $$ v_m = \frac{15}{2}$$
   - The pair of intervals $(I_1, I_2)$ has the same widths as the pair $(J_1, J_2)$, but the width of respective products differ, and so can not be a function of widths of term intervals


**** Exercise 2.10 - Divide by interval spanning zero
It is not clear what it means to divide by an interval that spans zero. Modify code to check for this condition and to signal error if it occurs.

#+name: ex2.10-updated-div-interval
#+begin_src racket
  (define (div-interval x y)
    (if (and (<= (lower-bound y) 0)
	     (>= (upper-bound y) 0))
	(error "Undefined division by interval containing 0 -- div-interval" y)
	(mul-interval x
		      (make-interval (/ 1.0 (upper-bound y))
				     (/ 1.0 (lower-bound y))))))
#+end_src

#+RESULTS[4f20cf959d99b212d5c6cb7d413ab047b86ecf9e]: ex2.10-updated-div-interval
: /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-Vtoyle/ob-racket34STtA.rkt:4:16: lower-bound: unbound identifier
:   in: lower-bound
:   location...:
:    /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-Vtoyle/ob-racket34STtA.rkt:4:16

See how it works:
#+name: ex2.10-test
#+begin_src racket :noweb strip-export
  #lang sicp

  <<interval-interface-1-snippet>>

  (define j1 (make-interval 1 2))
  (define j2 (make-interval 1 2))
  (div-interval j1 j2)

  (define i1 (make-interval 1 2))
  (define i2 (make-interval -1 2))
  (div-interval i1 i2)

#+end_src

#+RESULTS[4bccf3ab4a68bc6ef9a76da0765e8385965fa97e]: ex2.10-test
: Undefined division by interval containing 0 -- div-interval (-1 . 2)
:   context...:
:    body of "/var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-gqTov2/ob-racketgF8jkY.rkt"
: (0.5 . 2.0)


**** Exercise 2.11 - Optimize ~mul-interval~

By test the signs of the endpoints of the intervals, it is possible to break ~mul-interval~ into nine cases, only one of which requires more than two multiplications.

#+name: interval-mul-optimized
#+begin_src racket
  (define (mul-interval-optimized x y)
    (define (neg? a) (< a 0))
    (define (non-neg? a) (>= a 0))
    (let ((xl (lower-bound x))
	  (xu (upper-bound x))
	  (yl (lower-bound y))
	  (yu (upper-bound y)))
      (cond ((neg? xu)
	     (cond ((neg? yu)
		    (make-interval (* xu yu) (* xl yl)))
		   ((and (neg? yl) (non-neg? yu))
		    (make-interval (* xl yu) (* xl yl)))
		   ((non-neg? yu)
		    (make-interval (* xl yu) (* xu yl)))))
	    ((and (neg? xl) (non-neg? xu))
	     (cond ((neg? yu)
		    (make-interval (* xu yl) (* xl yl)))
		   ((and (neg? yl) (non-neg? yu))
		    (let ((l1 (* xl yu))
			  (l2 (* xu yl))
			  (u1 (* xl yl))
			  (u2 (* xu yu)))
		      (make-interval (if (< l1 l2) l1 l2)
				     (if (> u1 u2) u1 u2))))
		   ((non-neg? yu)
		    (make-interval (* xl yu)
				   (* xu yu)))))
	    ((non-neg? xl)
	     (cond ((neg? yu)
		    (make-interval (* xu yl)
				   (* xl yu)))
		   ((and (neg? yl) (non-neg? yu))
		    (make-interval (* xu yl)
				   (* xu yu)))
		   ((non-neg? yu)
		    (make-interval (* xl yl) (* xu yu))))))))
#+end_src

#+RESULTS[4ffe309780b1fea2fec4a3282f909382d9aa81cd]: interval-mul-optimized
: /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-7EYdr2/ob-racket3nqFaj.rkt:6:13: lower-bound: unbound identifier
:   in: lower-bound
:   location...:
:    /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-7EYdr2/ob-racket3nqFaj.rkt:6:13

Validate compared to the simple method:
#+name: ex-2.11-test
#+begin_src racket :noweb strip-export
  #lang sicp
  <<interval-interface-1-snippet>>
  <<interval-mul-optimized>>
  (define (equal-interval? x y) (and (= (lower-bound x) (lower-bound y))
				     (= (upper-bound x) (upper-bound y))))

  (define (test i1 i2)
    (let ((expected (mul-interval i1 i2))
	  (actual (mul-interval-optimized i1 i2)))
      (if (not (equal-interval? actual expected))
	  (list "fail" i1 i2 "expected:" expected "actual:" actual)
	  "pass")))

  (test (make-interval -3 -2) (make-interval -5 -4))
  (test (make-interval -3 -2) (make-interval -5 4))
  (test (make-interval -3 -2) (make-interval 4 5))

  (test (make-interval -3 2) (make-interval -5 -4))
  (test (make-interval -3 2) (make-interval -5 4))
  (test (make-interval -3 10) (make-interval -5 12))
  (test (make-interval -3 2) (make-interval 4 5))

  (test (make-interval 2 3) (make-interval -5 -4))
  (test (make-interval 2 3) (make-interval -5 4))
  (test (make-interval 2 3) (make-interval 4 5))
#+end_src

#+RESULTS[31c18114cc3267c07e0ba6bbd58612d7e895ff25]: ex-2.11-test
#+begin_example
"pass"
"pass"
"pass"
"pass"
"pass"
"pass"
"pass"
"pass"
"pass"
"pass"
#+end_example


**** Alternate constructors
Program should with numbers represented as a center value and an additive tolerance, e.g. $3.5 \pm 0.15$, not $[3.35, 3.65]$.

#+name: interval-interface-center-width
#+begin_src racket :exports code
  (define (make-center-width c w)
    (make-interval (- c w) (+ c w)))

  (define (center i)
    (/ (+ (lower-bound i) (upper-bound i)) 2))

  (define (width i)
    (/ (- (upper-bound i) (lower-bound i)) 2))
#+end_src

#+RESULTS[89c8c23701b0a424d51cb823a15857cfb26135bb]: interval-interface-center-width
: /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-3AlohL/ob-racketnedPUO.rkt:4:3: make-interval: unbound identifier
:   in: make-interval
:   location...:
:    /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-3AlohL/ob-racketnedPUO.rkt:4:3

**** Exercise 2.12 - Center-percentage interface
Define a constructor ~make-center-percent~ that takes a center and a percentage tolerance and produces the desired interval.
Also define ~percent~ selector.

#+name: interval-interface-center-percent
#+begin_src racket :exports code
  (define (make-center-percent c p)
    (let ((w (* c p 0.01)))
      (make-interval (- c w) (+ c w))))

  (define (center i)
    (/ (+ (lower-bound i) (upper-bound i)) 2))

  (define (width i)
    (/ (- (upper-bound i) (lower-bound i)) 2))

  (define (percent i)
    (* 100 (width i) (/ 1 (center i))))
#+end_src

#+RESULTS[891c04878ff63339a43ec7754878b64f7195611e]: interval-interface-center-percent
: /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-zZnb4T/ob-racket0rcICj.rkt:5:5: make-interval: unbound identifier
:   in: make-interval
:   location...:
:    /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-zZnb4T/ob-racket0rcICj.rkt:5:5

#+name: ex2.12-test
#+begin_src racket :noweb strip-export
  #lang sicp
  <<interval-interface-1-snippet>>
  <<interval-interface-center-percent>>
  (define i (make-center-percent 6.8 10))
  (center i)
  (percent i)
  (width i)
  i
#+end_src

#+RESULTS[0aaa22761bc5a995d04fb431fa7f65483b3f0e70]: ex2.12-test
: 6.8
: 9.999999999999996
: 0.6799999999999997
: (6.12 . 7.4799999999999995)

**** Exercise 2.13 - Approximate product tolerance when percentages are small

Assume all bounds are positive numbers, for simplicity.

Consider the product of two intervals $a \pm p$ and $b \pm q$.

Their corresponding interval representation is $[a(1-p), a(1+p)]$ and $[b(1-q), b(1+q)]$.

As all bounds are assumed to be positive numbers, we can readily find the bounds of the product: $$[ab(1-p)(1-q), ab(1+p)(1+q)] = [ab(1 - (p+q) + pq), ab(1 + (p+q) + pq)$$

If $p$ and $q$ are small, $pq$ is very small, we can neglect it for the approximation, and then $$(a \pm p) \times (b \pm q) \approx (ab \pm (p+q))$$

**** Different results for algebraically equivalent expressions

#+name: alternate-expression-complaint-demo
#+begin_src racket :exports code
  (define (par1 r1 r2)
    (div-interval (mul-interval r1 r2)
		  (add-interval r1 r2)))

  (define (par2 r1 r2)
    (let ((one (make-interval 1 1)))
      (div-interval one
		    (add-interval (div-interval one r1)
				  (div-interval one r2)))))
#+end_src

#+RESULTS[92376e3a1e961d4cb2dfce1bc6c11adac105c80f]: alternate-expression-complaint-demo
: /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-n8i7M1/ob-racketicUXmI.rkt:4:3: div-interval: unbound identifier
:   in: div-interval
:   location...:
:    /var/folders/9t/w6bf6xgd4qs98pm22l9hcpk40000gn/T/ob-racket-n8i7M1/ob-racketicUXmI.rkt:4:3

**** TODO Exercise 2.14 - Demonstrate the bug
#+name: ex-2.14-demo
#+begin_src racket :noweb strip-export
  #lang sicp
  <<interval-interface-1-snippet>>
  <<interval-interface-center-percent>>

  <<alternate-expression-complaint-demo>>
  (define (display-center-percent i)
    (define (round2 x) (/ (round (* 1000 x)) 1000))
    (display (round2 (center i)))
    (display " ± ")
    (display (round2 (percent i)))
    (newline))

  (define i1 (make-center-percent 6.8 10))
  (define i2 (make-center-percent 6.8 7.5))
  (define i3 (make-center-percent 6.8 4))
  (define i4 (make-center-percent 6.8 2))

  (define i5 (make-center-percent 4.7 5))

  (newline)
  (display "div by self:") (newline)
  (display-center-percent (div-interval i1 i1))
  (display-center-percent (div-interval i2 i2))
  (display-center-percent (div-interval i3 i3))
  (display-center-percent (div-interval i4 i4))

  (newline)
  (display "mul by self:") (newline)
  (display-center-percent (mul-interval i1 i1))
  (display-center-percent (mul-interval i2 i2))
  (display-center-percent (mul-interval i3 i3))
  (display-center-percent (mul-interval i4 i4))

  (newline)
  (display "div by same:") (newline)
  (display-center-percent (div-interval i1 i5))
  (display-center-percent (div-interval i2 i5))
  (display-center-percent (div-interval i3 i5))
  (display-center-percent (div-interval i4 i5))

  (newline)
  (display "same divided:") (newline)
  (display-center-percent (div-interval i5 i1))
  (display-center-percent (div-interval i5 i2))
  (display-center-percent (div-interval i5 i3))
  (display-center-percent (div-interval i5 i4))

  (newline) (display "-------------------") (newline)


  (display "r1: ") (display-center-percent i4)
  (display "r2: ") (display-center-percent i5)

  (newline)
  (display "step-by-step par1") (newline)
  (display "mul: ") (display-center-percent (mul-interval i4 i5))
  (display "add: ") (display-center-percent (add-interval i4 i5))
  (display "div: ") (display-center-percent (par1 i4 i5))

  (newline)
  (display "step-by-step par2") (newline)
  (display "rec1: ") (display-center-percent (div-interval (make-interval 1 1) i4))
  (display "rec2: ") (display-center-percent (div-interval (make-interval 1 1) i5))
  (display "add: ") (display-center-percent (add-interval (div-interval (make-interval 1 1) i4)
							  (div-interval (make-interval 1 1) i5)))
  (display "rec: ") (display-center-percent (par2 i4 i5))

  (newline)
  (display "par examples:") (newline)
  (display-center-percent (par1 i4 i5))
  (display-center-percent (par2 i4 i5))


#+end_src

#+RESULTS[a95b35d7cfc264979f7dd93d85caf81bc31c96ff]: ex-2.14-demo
#+begin_example

div by self:
1.02 ± 19.802
1.011 ± 14.916
1.003 ± 7.987
1.001 ± 3.998

mul by self:
46.702 ± 19.802
46.5 ± 14.916
46.314 ± 7.987
46.258 ± 3.998

div by same:
1.458 ± 14.925
1.456 ± 12.453
1.453 ± 8.982
1.452 ± 6.993

same divided:
0.702 ± 14.925
0.698 ± 12.453
0.694 ± 8.982
0.692 ± 6.993

-------------------
r1: 6.8 ± 2.0
r2: 4.7 ± 5.0

step-by-step par1
mul: 31.992 ± 6.993
add: 11.5 ± 3.226
div: 2.791 ± 10.196

step-by-step par2
rec1: 0.147 ± 2.0
rec2: 0.213 ± 5.0
add: 0.36 ± 3.775
rec: 2.779 ± 3.775

par examples:
2.791 ± 10.196
2.779 ± 3.775
#+end_example

**** TODO Exercise 2.15
**** TODO Exercise 2.16
