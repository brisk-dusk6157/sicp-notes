#lang sicp

(define (make-table-x)
  (define (make-record key value subtable)
    (list key value subtable))
  (define (key-record r) (car r))
  (define (value-record r) (cadr r))
  (define (subtable-record r) (caddr r))
  (define (set-value-record! r v) (set-car! (cdr r) v))
  (define (set-subtable-record! r v) (set-car! (cddr r) v))

  (define (assoc key backbone)
    (cond ((null? backbone) false)
	  ((eq? key (caar backbone)) (car backbone))
	  (else (assoc key (cdr backbone)))))

  (define (lookup-rec keys parent)
    (let ((record (assoc (car keys) (subtable-record parent))))
      (cond ((not record) false)
	    ((null? (cdr keys))
	     (if (null? (value-record record))
		 false
		 (value-record record)))
	    (else (lookup-rec (cdr keys) record)))))

  (define (create! keys value parent)
    (let* ((new-record (make-record (car keys) '() '()))
	   (new-subtable (cons new-record (subtable-record parent))))
      (set-subtable-record! parent new-subtable)
      (if (null? (cdr keys))
	  (set-value-record! new-record value)
	  (create! (cdr keys) value new-record))))

  (define (insert-rec! keys value parent)
    (let ((record (assoc (car keys) (subtable-record parent))))
      (cond ((not record)
	     (create! keys value parent))
	    ((null? (cdr keys))
	     (set-value-record! record value))
	    (else
	     (insert-rec! (cdr keys) value record))))
    'ok)

  (define (collect-rec parent keys-prefix acc)
    (define (iter backbone acc)
      (if (null? backbone)
	  acc
	  (let* ((record (car backbone))
		 (keys-prefix-1 (cons (key-record record) keys-prefix))
		 (acc-1 (collect-rec record
				     keys-prefix-1
				     (if (null? (value-record record))
					 acc
					 (cons (cons (reverse keys-prefix-1)
						     (value-record record))
					       acc)))))
	    (iter (cdr backbone) acc-1))))
    (iter (subtable-record parent) acc))

  (let ((root (make-record '*table* '() '())))
    (define (lookup keys)
      (if (null? keys)
	  (error "Empty keys")
	  (lookup-rec keys root)))
    (define (insert! keys value)
      (if (null? keys)
	  (error "Empty keys")
	  (insert-rec! keys value root)))
    (define (print-table)
      (display (collect-rec root '() '()))
      (newline))

    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
	    ((eq? m 'insert!) insert!)
	    ((eq? m 'print) (print-table))
	    (else (error "Unknown method -- TABLE-X" m))))
    dispatch))

(define tab (make-table-x))

((tab 'insert!) (list 'a) 10)
(tab 'print)
((tab 'insert!) (list 'a 'a1) 11)
((tab 'lookup) (list 'a))
((tab 'lookup) (list 'a 'a1))
((tab 'insert!) (list 'a 'a1 'a2 'a3) 12)
((tab 'lookup) (list 'a))
((tab 'lookup) (list 'a 'a1))
((tab 'lookup) (list 'a 'a1 'a2))
(tab 'print)
((tab 'lookup) (list 'a 'a1 'a2 'a3))
((tab 'insert!) (list 'a 'a1 'a2) 13)
((tab 'insert!) (list 'b) 10)
((tab 'insert!) (list 'b 'a1) 11)
((tab 'insert!) (list 'b 'a1 'a2 'a3) 12)
((tab 'insert!) (list 'b 'a1 'a2) 13)
((tab 'lookup) (list 'b 'a1))
(tab 'print)
